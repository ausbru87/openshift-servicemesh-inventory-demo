apiVersion: kubevirt.io/v1
kind: VirtualMachine
metadata:
  name: legacy-validator
  namespace: inventory-demo
  labels:
    app: legacy-validator
    component: vm
    version: v1
    # Service mesh labels
    service.istio.io/canonical-name: legacy-validator
    service.istio.io/canonical-revision: v1
  annotations:
    argocd.argoproj.io/sync-wave: "2"
    # ArgoCD health check configuration
    argocd.argoproj.io/health-check: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          for i, condition in ipairs(obj.status.conditions) do
            if condition.type == "Ready" and condition.status == "True" then
              hs.status = "Healthy"
              hs.message = "VirtualMachine is ready"
              return hs
            end
          end
        end
        if obj.status.printableStatus == "Running" then
          hs.status = "Healthy"
          hs.message = "VirtualMachine is running"
          return hs
        end
      end
      hs.status = "Progressing"
      hs.message = "VirtualMachine is not ready"
      return hs
    argocd.argoproj.io/sync-options: "SkipDryRunOnMissingResource=true"
    # Ignore the virt-launcher pod health
    argocd.argoproj.io/compare-options: "IgnoreExtraneous"
    description: "Legacy Fedora VM running item validation service"
spec:
  # VM should be running
  running: true
  
  # VM Template
  template:
    metadata:
      labels:
        app: legacy-validator
        component: vm
        version: v1
        # Important: These labels help with service mesh integration
        kubevirt.io/vm: legacy-validator
        service.istio.io/canonical-name: legacy-validator
        service.istio.io/canonical-revision: v1
      annotations:
        # Note: VMs don't get Istio sidecar injection automatically
        # We'll handle service mesh integration via WorkloadEntry
        vm.kubevirt.io/os: "fedora39"
    spec:
      # VM should be scheduled and restart if it fails
      domain:
        # CPU and Memory configuration
        cpu:
          cores: 2
          sockets: 1
          threads: 1
        memory:
          guest: 4Gi
        
        # Devices configuration
        devices:
          # Disk configuration
          disks:
          - name: rootdisk
            bootOrder: 1
            disk:
              bus: virtio
          - name: cloudinitdisk
            disk:
              bus: virtio
          
          # Network configuration
          interfaces:
          - name: default
            masquerade: {}
            
          # Enable serial console for troubleshooting
          rng: {}
        
        # Resource requirements
        resources:
          requests:
            memory: 4Gi
            cpu: "1"
          limits:
            memory: 4Gi
            cpu: "2"
            
        # Machine type for CentOS 7 (older)
        machine:
          type: pc-q35-4.2  # Generic modern machine type
          
      # Ensure VM gets scheduled
      nodeSelector: {}
      
      # Network configuration
      networks:
      - name: default
        pod: {}
        
      # Volume configuration
      volumes:
      - name: rootdisk
        dataVolume:
          name: legacy-validator-disk  # Must match dataVolumeTemplates name
      - name: cloudinitdisk
        cloudInitNoCloud:
          secretRef:
            name: legacy-validator-cloud-init
            
  # Data volume templates (this ensures the DataVolume is created with the VM)
  dataVolumeTemplates:
  - metadata:
      name: legacy-validator-disk  # This name must match the volume reference above
      labels:
        app: legacy-validator
        component: vm
    spec:
      source:
        http:
          # CenTOS 8 Stream image URL
          url: "https://download.fedoraproject.org/pub/fedora/linux/releases/39/Cloud/x86_64/images/Fedora-Cloud-Base-39-1.5.x86_64.qcow2"
      storage:
        resources:
          requests:
            storage: 40Gi
        accessModes:
          - ReadWriteMany  # Required for live migration
        storageClassName: nfs-nvme