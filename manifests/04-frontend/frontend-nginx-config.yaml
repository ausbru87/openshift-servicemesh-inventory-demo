# This ConfigMap defines the Nginx configuration for the frontend.
# It serves static files and proxies API requests to the backend service.
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-frontend-config
  namespace: inventory-demo
  labels:
    app: frontend
    component: ui
  annotations:
    argocd.argoproj.io/sync-wave: "3" # Ensure this is applied before the frontend deployment
data:
  nginx.conf: |
    # Main Nginx configuration
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log info;
    pid /run/nginx.pid;

    events {
        worker_connections 1024;
    }

    http {
        include /etc/nginx/mime.types; # This should handle most .js files
        default_type application/octet-stream;

        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /var/log/nginx/access.log main;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_buffers 16 8k;
        gzip_http_version 1.1;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        server {
            listen 8080; # Frontend container listens on 8080
            server_name localhost;

            # Root for static files
            root /usr/share/nginx/html;
            index index.html index.htm;

            # Explicitly set MIME type for service worker script
            # This ensures sw.js is served as JavaScript, not HTML.
            location = /sw.js {
                add_header Content-Type application/javascript;
                try_files $uri =404; # Ensure it's served directly if it exists
            }

            # Proxy API requests to the backend service
            # The backend service is named 'backend-service' and listens on port 5000
            location /api/ {
                # Use the Kubernetes service name for internal cluster communication
                proxy_pass http://backend-service:5000/api/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 60s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;
                # Pass through Service Mesh headers if needed (for tracing etc.)
                proxy_set_header X-Service-Mesh $http_x_service_mesh;
            }

            # Serve static files for the root path
            location / {
                try_files $uri $uri/ /index.html;
            }

            # Custom error pages (optional, but good practice)
            error_page 404 /404.html;
            location = /404.html {
                internal;
            }

            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
                internal;
            }
        }
    }
