# Nginx configuration for OpenShift Service Mesh Inventory Demo Frontend
# Optimized for Service Mesh traffic and OpenShift deployment

# Main context
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /tmp/nginx.pid;

# Events context
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# HTTP context
http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format optimized for Service Mesh observability
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'mesh="$http_x_service_mesh"';
    
    # Service Mesh specific logging
    log_format service_mesh 'timestamp="$time_iso8601" '
                           'remote_addr="$remote_addr" '
                           'request="$request" '
                           'status=$status '
                           'bytes_sent=$body_bytes_sent '
                           'request_time=$request_time '
                           'upstream_time="$upstream_response_time" '
                           'user_agent="$http_user_agent" '
                           'x_forwarded_for="$http_x_forwarded_for" '
                           'x_service_mesh="$http_x_service_mesh" '
                           'x_request_id="$http_x_request_id" '
                           'x_b3_traceid="$http_x_b3_traceid"';
    
    access_log /var/log/nginx/access.log service_mesh;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10m;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Service Mesh headers
    add_header X-Service-Mesh "true" always;
    add_header X-Service-Name "inventory-frontend" always;
    add_header X-Service-Version "1.0.0" always;
    
    # Upstream backend configuration for Service Mesh
    upstream backend {
        server backend-service:5000;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # Rate limiting (optional)
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=30r/s;
    
    # Server configuration
    server {
        listen 8080;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;
        
        # Security: Server tokens
        server_tokens off;
        
        # Location for static files
        location / {
            try_files $uri $uri/ /index.html;
            
            # Cache control for static assets
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Cache-Status "static";
                
                # Apply rate limiting to static files
                limit_req zone=static burst=50 nodelay;
            }
            
            # No cache for HTML files
            location ~* \.html$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
            }
        }
        
        # API proxy to backend service through Service Mesh
        location /api/ {
            # Apply rate limiting to API calls
            limit_req zone=api burst=20 nodelay;
            
            # Proxy settings
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Service Mesh headers
            proxy_set_header X-Service-Mesh "true";
            proxy_set_header X-Client-Service "inventory-frontend";
            proxy_set_header X-Client-Version "1.0.0";
            
            # Preserve original request ID for tracing
            proxy_set_header X-Request-ID $request_id;
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 10s;
            
            # Health check response modification
            location = /api/health {
                proxy_pass http://backend;
                add_header X-Health-Check "frontend-proxy" always;
            }
        }
        
        # Health check endpoint for Kubernetes
        location /health {
            access_log off;
            return 200 '{"status":"healthy","service":"inventory-frontend","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
            add_header X-Health-Source "nginx";
        }
        
        # Readiness check endpoint
        location /ready {
            access_log off;
            return 200 '{"status":"ready","service":"inventory-frontend","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }
        
        # Metrics endpoint for Prometheus (if monitoring is enabled)
        location /metrics {
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            return 200 '# HELP nginx_frontend_up Frontend service status
# TYPE nginx_frontend_up gauge
nginx_frontend_up 1
# HELP nginx_frontend_requests_total Total number of requests
# TYPE nginx_frontend_requests_total counter
nginx_frontend_requests_total{method="GET",status="200"} 1
';
            add_header Content-Type text/plain;
        }
        
        # Deny access to hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Deny access to backup files
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # Include additional configurations if they exist
    include /etc/nginx/conf.d/*.conf;
}